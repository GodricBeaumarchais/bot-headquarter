// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider     = "prisma-client-js"
  output       = "../generated/prisma"
  moduleFormat = "commonjs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  discordId     String    @unique
  username      String
  avatar        String?   // Hash de l'avatar Discord
  discriminator String?   // Discriminateur Discord (ancien système)
  token         Int       @default(0)
  streak        Int       @default(0)
  lastDailyDate DateTime?
  roleId        String    // UUID du rôle
  role          Role      @relation(fields: [roleId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ootdReactions OOTDReaction[]
  commandLogs   CommandLog[]
  reactionLogs  ReactionLog[]
  // Relations pour les jeux (via les tables de jeu)
  chifumiGamesAsChallenger ChifumiGame[] @relation("ChifumiChallenger")
  chifumiGamesAsOpponent  ChifumiGame[] @relation("ChifumiOpponent")
  chifumiGamesWon         ChifumiGame[] @relation("ChifumiWinner")
  chifumiRoundsWon        ChifumiRound[] @relation("ChifumiRoundWinner")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  discordId   String   @unique // ID du rôle Discord
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OOTDReaction {
  id          String   @id @default(uuid())
  messageId   String   @unique
  authorId    String   // ID de l'auteur du message OOTD
  reactorId   String   // ID de celui qui a réagi
  createdAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [discordId])
  
  @@unique([messageId, reactorId])
}

model CommandLog {
  id          String   @id @default(uuid())
  userId      String   // ID de l'utilisateur qui a exécuté la commande
  user        User     @relation(fields: [userId], references: [discordId])
  commandName String   // Nom de la commande (ex: "daily", "transfer", "generate")
  commandType String   // Type de commande ("slash" ou "prefix")
  channelId   String   // ID du canal où la commande a été exécutée
  guildId     String?  // ID du serveur (optionnel pour les DMs)
  args        String?  // Arguments de la commande (JSON stringifié)
  success     Boolean  // Si la commande s'est bien exécutée
  error       String?  // Message d'erreur si échec
  executionTime Int?   // Temps d'exécution en millisecondes
  createdAt   DateTime @default(now())
}

model ReactionLog {
  id          String   @id @default(uuid())
  userId      String   // ID de l'utilisateur qui a réagi
  user        User     @relation(fields: [userId], references: [discordId])
  messageId   String   // ID du message réagi
  channelId   String   // ID du canal
  guildId     String?  // ID du serveur
  emoji       String   // Émoji utilisé
  action      String   // "add" ou "remove"
  isOOTD      Boolean  @default(false) // Si c'est une réaction OOTD
  ootdAuthorId String? // ID de l'auteur du message OOTD si applicable
  tokensEarned Int?    // Tokens gagnés/perdus si applicable
  createdAt   DateTime @default(now())
}

// ========================================
// SYSTÈME DE JEUX - CHIFUMI
// ========================================

model ChifumiGame {
  id          String   @id @default(uuid())
  gameId      String   @unique // ID court pour les liens (ex: "abc123")
  challengerId String  // ID du joueur qui défie
  challenger  User     @relation("ChifumiChallenger", fields: [challengerId], references: [discordId])
  opponentId  String   // ID du joueur défié
  opponent    User     @relation("ChifumiOpponent", fields: [opponentId], references: [discordId])
  betAmount   Int      // Montant de la mise en tokens
  status      ChifumiGameStatus @default(PENDING) // PENDING, ACTIVE, FINISHED, CANCELLED
  winnerId    String?  // ID du gagnant final
  winner      User?    @relation("ChifumiWinner", fields: [winnerId], references: [discordId])
  currentRound Int     @default(1) // Manche actuelle
  totalRounds Int      @default(3) // Nombre total de manches
  rounds      ChifumiRound[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime // Expiration de la proposition (24h)
}

model ChifumiRound {
  id          String   @id @default(uuid())
  gameId      String
  game        ChifumiGame @relation(fields: [gameId], references: [id], onDelete: Cascade)
  roundNumber Int      // Numéro de la manche (1, 2, 3...)
  challengerChoice ChifumiChoice? // Choix du challenger
  opponentChoice   ChifumiChoice? // Choix de l'opposant
  winnerId    String?  // ID du gagnant de cette manche
  winner      User?    @relation("ChifumiRoundWinner", fields: [winnerId], references: [discordId])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([gameId, roundNumber])
}

enum ChifumiGameStatus {
  PENDING    // En attente d'acceptation
  ACTIVE     // Partie en cours
  FINISHED   // Partie terminée
  CANCELLED  // Partie annulée
}

enum ChifumiChoice {
  ROCK       // Pierre
  PAPER      // Papier
  SCISSORS   // Ciseaux
}

// ========================================
// SYSTÈME DE JEUX - FUTURS MINI-JEUX
// ========================================

// Exemple de structure pour un futur mini-jeu
// model DiceGame {
//   id          String   @id @default(uuid())
//   gameId      String   @unique
//   playerId    String
//   player      User     @relation(fields: [playerId], references: [discordId])
//   betAmount   Int
//   diceResult  Int
//   won         Boolean
//   tokensWon   Int
//   createdAt   DateTime @default(now())
// }

// model CoinFlipGame {
//   id          String   @id @default(uuid())
//   gameId      String   @unique
//   playerId    String
//   player      User     @relation(fields: [playerId], references: [discordId])
//   betAmount   Int
//   choice      String   // "heads" ou "tails"
//   result      String   // "heads" ou "tails"
//   won         Boolean
//   tokensWon   Int
//   createdAt   DateTime @default(now())
// }

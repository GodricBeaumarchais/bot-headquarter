import { REST, Routes } from 'discord.js';
import { CommandHandler } from './utils/commandHandler';
import { Client } from 'discord.js';
import dotenv from 'dotenv';

dotenv.config();

const client = new Client({ intents: [] });
const commandHandler = new CommandHandler(client);

async function deployCommands() {
    try {
        console.log('üöÄ D√©ploiement des commandes slash...');
        
        // Charger les commandes
        commandHandler.loadCommands();
        const commands = commandHandler.getAllCommandsData();
        
        console.log(`üìù ${commands.length} commandes √† d√©ployer :`);
        commands.forEach(cmd => console.log(`  - /${cmd.name}: ${cmd.description}`));
        
        // Cr√©er l'instance REST
        const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN!);
        
        // Extraire le CLIENT_ID du token Discord
        const clientId = process.env.DISCORD_TOKEN!.split('.')[0];
        
        // D√©ployer les commandes globalement
        console.log('üåç D√©ploiement global des commandes...');
        
        const data = await rest.put(
            Routes.applicationCommands(clientId),
            { body: commands }
        );
        
        console.log(`‚úÖ ${(data as any[]).length} commandes d√©ploy√©es avec succ√®s !`);
        
        // Afficher les commandes d√©ploy√©es
        console.log('\nüìã Commandes d√©ploy√©es :');
        (data as any[]).forEach((cmd: any) => {
            console.log(`  - /${cmd.name}: ${cmd.description}`);
        });
        
    } catch (error) {
        console.error('‚ùå Erreur lors du d√©ploiement des commandes:', error);
    }
}

// Ex√©cuter le d√©ploiement
deployCommands(); 